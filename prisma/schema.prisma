generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int           @id @default(autoincrement())
  phone        String?       @unique
  email        String?       @unique
  username     String        @unique
  avatarUrl    String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  tokens       Token[]
  products     Product[]
  posts        Post[]
  productLikes ProductLike[]
  postLikes    PostLike[]
  postComments PostComment[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Int
  imageUrl     String
  description  String        @db.MediumText
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  productLikes ProductLike[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Post {
  id           Int           @id @default(autoincrement())
  text         String        @db.MediumText
  imageUrl     String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  postLikes    PostLike[]
  postComments PostComment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model PostLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model PostComment {
  id        Int      @id @default(autoincrement())
  text      String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
