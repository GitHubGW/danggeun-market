generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                Int             @id @default(autoincrement())
  phone             String?         @unique
  email             String?         @unique
  username          String          @unique
  cloudflareImageId String?
  address           String?
  tokens            Token[]
  products          Product[]
  productLikes      ProductLike[]
  posts             Post[]
  postLikes         PostLike[]
  postComments      PostComment[]
  writtenReviews    Review[]        @relation(name: "WrittenReviews")
  receivedReviews   Review[]        @relation(name: "ReceivedReviews")
  purchases         Purchase[]
  sales             Sale[]
  streams           Stream[]
  streamMessages    StreamMessage[]
  chats             Chat[]
  chatMessages      ChatMessage[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}

model Product {
  id                Int           @id @default(autoincrement())
  name              String
  price             Int
  cloudflareImageId String
  description       String        @db.MediumText
  isSelling         Boolean       @default(true)
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
  productLikes      ProductLike[]
  purchases         Purchase[]
  sales             Sale[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()

  @@index([userId])
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([productId])
}

model Post {
  id                Int           @id @default(autoincrement())
  text              String        @db.MediumText
  cloudflareImageId String?
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
  postLikes         PostLike[]
  postComments      PostComment[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()

  @@index([userId])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([postId])
}

model PostComment {
  id        Int      @id @default(autoincrement())
  text      String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([postId])
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String   @db.MediumText
  rating    Int      @default(3)
  from      User     @relation(name: "WrittenReviews", fields: [fromId], references: [id])
  fromId    Int
  to        User     @relation(name: "ReceivedReviews", fields: [toId], references: [id])
  toId      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([fromId])
  @@index([toId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([productId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([productId])
}

model Stream {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String          @db.MediumText
  user                User            @relation(fields: [userId], references: [id])
  userId              Int
  streamMessages      StreamMessage[]
  cloudflareStreamId  String?
  cloudflareStreamUrl String?
  cloudflareStreamKey String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt()

  @@index([userId])
}

model StreamMessage {
  id        Int      @id @default(autoincrement())
  text      String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([streamId])
}

model Chat {
  id           Int           @id @default(autoincrement())
  users        User[]
  chatMessages ChatMessage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
  @@index([chatId])
}
